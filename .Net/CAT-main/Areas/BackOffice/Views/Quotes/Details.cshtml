@model CAT.Models.Entities.Main.TempQuote

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Order</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Document
        </dt>
        <dd class="col-sm-10">
            @Model.TempDocument.OriginalFileName
        </dd>
        <dt class="col-sm-2">
            Source language
        </dt>
        <dd class="col-sm-10">
            @ViewBag.Languages[@Model.SourceLanguage]
        </dd>
        <dt class="col-sm-2">
            Target language
        </dt>
        <dd class="col-sm-10">
            @ViewBag.Languages[@Model.TargetLanguage]
        </dd>
        <dt class="col-sm-2">
            Speciality
        </dt>
        <dd class="col-sm-10">
            @ViewBag.Specialities[@Model.SpecialityId]
        </dd>
        <dt class="col-sm-2">
            Speed
        </dt>
        <dd class="col-sm-10">
            @(((CAT.Enums.ServiceSpeed)Model.Speed).ToString())
        </dd>
        <dt class="col-sm-2">
            Service
        </dt>
        <dd class="col-sm-10">
            @(((CAT.Enums.Service)Model.Service).ToString())
        </dd>
        <dt class="col-sm-2">
            Client review
        </dt>
        <dd class="col-sm-10">
            @(Model.ClientReview.ToString())
        </dd>
        <dt class="col-sm-2">
            Fee
        </dt>
        <dd class="col-sm-10">
            £@Model.Fee
        </dd>
        <dt class="col-sm-2">
            Analysis
        </dt>
        <dd class="col-sm-10">
            <a href="#" id="openPopupLink">View Analysis</a>
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

@{
    ViewBag.ModalTitle = "Analysis";

    // Parse the JSON string into a dynamic object
    var analysisData = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(Model!.Analysis!);

    // Create an HTML table from the dynamic object
    var tableHtml = "<table class='table table-bordered'>";
    foreach (var property in analysisData)
    {
        tableHtml += "<tr><td>" + property.Name + "</td><td>" + property.Value + "</td></tr>";
    }
    tableHtml += "</table>";

    ViewBag.ModalContent = tableHtml;
}


@await Html.PartialAsync("_ModalPartial")


@section Scripts {
    <script>
        $(document).ready(function () {
            $("#openPopupLink").click(function () {
                // Modify modal content and show the modal as needed
                // Example: $("#genericModal .modal-title").text("Custom Title");
                // Example: $("#genericModal .modal-body").html("Custom content goes here");
                $("#genericModal").modal('show');
            });
        });
    </script>
}

